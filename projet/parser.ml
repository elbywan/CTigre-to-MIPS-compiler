type token =
  | AND
  | ARRAY
  | ASSIGNS
  | BEGIN
  | COLON
  | COMMA
  | DIV
  | DO
  | DONE
  | DOWNTO
  | DOT
  | ELSE
  | END
  | EOF
  | EQUALS
  | FOR
  | IDENT of (string)
  | IF
  | IN
  | LCURL
  | FUNCTION
  | VAR
  | ANDLET
  | LPAR
  | LSQ
  | MINUS
  | MULT
  | NIL
  | GTEQ
  | LTEQ
  | GT
  | LT
  | NE
  | OR
  | NUM of (int)
  | OF
  | PLUS
  | RCURL
  | RPAR
  | RSQ
  | CHAR of (char)
  | SEMICOLON
  | STRING of (string)
  | TO
  | THEN
  | TYPE
  | WHILE

open Parsing;;
# 2 "parser.mly"
(* Regles de grammaires de ctigre (1) *)
(*  *)
open Ast;;
# 56 "parser.ml"
let yytransl_const = [|
  257 (* AND *);
  258 (* ARRAY *);
  259 (* ASSIGNS *);
  260 (* BEGIN *);
  261 (* COLON *);
  262 (* COMMA *);
  263 (* DIV *);
  264 (* DO *);
  265 (* DONE *);
  266 (* DOWNTO *);
  267 (* DOT *);
  268 (* ELSE *);
  269 (* END *);
    0 (* EOF *);
  270 (* EQUALS *);
  271 (* FOR *);
  273 (* IF *);
  274 (* IN *);
  275 (* LCURL *);
  276 (* FUNCTION *);
  277 (* VAR *);
  278 (* ANDLET *);
  279 (* LPAR *);
  280 (* LSQ *);
  281 (* MINUS *);
  282 (* MULT *);
  283 (* NIL *);
  284 (* GTEQ *);
  285 (* LTEQ *);
  286 (* GT *);
  287 (* LT *);
  288 (* NE *);
  289 (* OR *);
  291 (* OF *);
  292 (* PLUS *);
  293 (* RCURL *);
  294 (* RPAR *);
  295 (* RSQ *);
  297 (* SEMICOLON *);
  299 (* TO *);
  300 (* THEN *);
  301 (* TYPE *);
  302 (* WHILE *);
    0|]

let yytransl_block = [|
  272 (* IDENT *);
  290 (* NUM *);
  296 (* CHAR *);
  298 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\004\000\004\000\004\000\003\000\003\000\003\000\003\000\
\005\000\005\000\005\000\010\000\006\000\006\000\011\000\011\000\
\012\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\015\000\015\000\014\000\014\000\014\000\014\000\016\000\
\016\000\019\000\020\000\020\000\020\000\017\000\018\000\022\000\
\022\000\024\000\023\000\023\000\026\000\025\000\025\000\027\000\
\027\000\028\000\028\000\030\000\030\000\031\000\031\000\021\000\
\021\000\002\000\029\000\009\000\009\000\009\000\009\000\013\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\003\000\000\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\004\000\003\000\004\000\001\000\003\000\
\003\000\004\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\001\000\
\003\000\003\000\006\000\004\000\005\000\009\000\004\000\004\000\
\004\000\001\000\001\000\001\000\003\000\004\000\001\000\001\000\
\003\000\003\000\001\000\003\000\003\000\001\000\001\000\001\000\
\003\000\003\000\001\000\003\000\003\000\005\000\004\000\001\000\
\002\000\001\000\000\000\001\000\003\000\001\000\003\000\001\000\
\003\000\002\000\002\000\001\000\001\000\001\000\001\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\079\000\076\000\078\000\077\000\000\000\000\000\
\081\000\000\000\005\000\006\000\007\000\008\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\000\000\000\000\000\000\000\000\059\000\
\000\000\000\000\019\000\000\000\000\000\048\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\080\000\000\000\015\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\023\000\000\000\000\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\014\000\000\000\000\000\018\000\
\012\000\000\000\000\000\000\000\066\000\000\000\000\000\057\000\
\000\000\075\000\000\000\060\000\000\000\000\000\051\000\000\000\
\050\000\000\000\049\000\000\000\046\000\043\000\042\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\000\000\000\000\071\000\062\000\
\069\000\053\000\074\000\000\000\052\000\000\000\073\000\000\000\
\038\000"

let yydgoto = "\002\000\
\017\000\146\000\018\000\073\000\019\000\020\000\021\000\022\000\
\023\000\024\000\069\000\070\000\071\000\025\000\136\000\045\000\
\033\000\038\000\046\000\129\000\147\000\034\000\039\000\035\000\
\036\000\040\000\041\000\116\000\081\000\117\000\118\000"

let yysindex = "\019\000\
\001\255\000\000\001\255\013\255\240\254\001\255\014\255\022\255\
\001\255\001\255\000\000\000\000\000\000\000\000\032\255\001\255\
\000\000\177\002\000\000\000\000\000\000\000\000\000\000\039\255\
\130\255\139\255\035\255\051\255\001\255\001\255\094\255\053\255\
\065\255\069\255\000\000\079\255\089\255\078\255\075\255\000\000\
\095\255\159\255\000\000\097\255\249\254\000\000\197\255\001\255\
\001\255\000\000\001\255\001\255\001\255\001\255\001\255\001\255\
\001\255\001\255\001\255\001\255\001\255\001\255\001\255\051\255\
\001\255\000\000\001\255\000\000\250\254\000\000\098\255\096\003\
\252\254\197\002\001\255\093\255\001\255\014\255\001\255\100\255\
\000\000\001\255\022\255\001\255\000\000\070\255\001\255\032\255\
\001\255\164\003\000\000\176\255\018\255\000\000\122\255\122\255\
\122\255\122\255\122\255\138\003\018\255\096\003\096\003\217\255\
\000\000\230\002\074\255\051\255\000\000\001\255\001\255\000\000\
\000\000\129\003\116\255\090\255\000\000\125\255\096\003\000\000\
\096\003\000\000\096\003\000\000\096\003\099\255\000\000\121\255\
\000\000\096\003\000\000\007\003\000\000\000\000\000\000\001\255\
\000\000\096\003\096\003\001\255\126\255\089\255\093\255\128\255\
\089\255\143\255\108\255\000\000\043\003\217\255\000\000\000\000\
\000\000\000\000\000\000\121\255\000\000\001\255\000\000\076\003\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\079\000\000\000\000\000\000\000\254\254\000\000\000\000\000\000\
\000\000\114\255\000\000\000\000\147\255\000\000\133\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\255\
\000\000\000\000\000\000\117\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\174\001\000\000\196\000\118\000\000\000\235\000\018\001\
\057\001\096\001\135\001\192\001\157\000\025\002\043\002\231\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\082\002\031\255\000\000\000\000\118\255\093\002\000\000\
\005\255\000\000\132\002\000\000\055\255\000\000\000\000\000\000\
\000\000\150\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\255\033\255\000\000\000\000\145\255\000\000\000\000\
\000\000\137\255\000\000\000\000\000\000\242\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\099\000\000\000\000\000\000\000\
\000\000\000\000\088\000\000\000\021\000\000\000\000\000\100\000\
\000\000\096\000\000\000\000\000\164\255\038\000\000\000"

let yytablesize = 1224
let yytable = "\108\000\
\047\000\111\000\028\000\004\000\003\000\026\000\029\000\030\000\
\031\000\002\000\087\000\042\000\043\000\017\000\088\000\004\000\
\005\000\006\000\047\000\001\000\007\000\008\000\058\000\009\000\
\049\000\010\000\058\000\011\000\027\000\032\000\109\000\072\000\
\074\000\112\000\012\000\004\000\070\000\037\000\003\000\044\000\
\013\000\002\000\014\000\053\000\017\000\015\000\016\000\044\000\
\067\000\152\000\090\000\091\000\155\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\104\000\068\000\106\000\070\000\107\000\003\000\126\000\
\061\000\062\000\048\000\076\000\061\000\114\000\032\000\119\000\
\049\000\121\000\077\000\134\000\123\000\127\000\125\000\051\000\
\128\000\130\000\078\000\132\000\079\000\080\000\048\000\082\000\
\083\000\084\000\052\000\053\000\049\000\054\000\055\000\056\000\
\057\000\058\000\059\000\051\000\115\000\060\000\086\000\110\000\
\138\000\139\000\061\000\122\000\135\000\021\000\052\000\053\000\
\141\000\054\000\055\000\056\000\057\000\058\000\059\000\142\000\
\049\000\060\000\143\000\054\000\063\000\144\000\061\000\051\000\
\145\000\075\000\149\000\048\000\064\000\151\000\150\000\154\000\
\157\000\049\000\052\000\053\000\156\000\064\000\055\000\066\000\
\051\000\065\000\067\000\068\000\020\000\060\000\063\000\048\000\
\160\000\137\000\105\000\052\000\053\000\049\000\054\000\055\000\
\056\000\057\000\058\000\059\000\051\000\072\000\060\000\131\000\
\159\000\120\000\124\000\061\000\153\000\000\000\049\000\052\000\
\053\000\000\000\054\000\055\000\056\000\057\000\058\000\059\000\
\000\000\000\000\060\000\031\000\085\000\048\000\000\000\061\000\
\052\000\053\000\000\000\049\000\089\000\000\000\000\000\000\000\
\000\000\000\000\051\000\060\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\000\000\000\000\052\000\053\000\049\000\
\054\000\055\000\056\000\057\000\058\000\059\000\051\000\000\000\
\060\000\000\000\024\000\000\000\000\000\061\000\000\000\000\000\
\000\000\052\000\053\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\000\000\000\000\060\000\000\000\000\000\000\000\
\000\000\047\000\000\000\047\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\000\000\025\000\047\000\000\000\000\000\000\000\047\000\000\000\
\047\000\047\000\047\000\000\000\047\000\047\000\047\000\047\000\
\047\000\047\000\000\000\000\000\047\000\047\000\047\000\047\000\
\044\000\047\000\044\000\047\000\047\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\000\000\000\000\
\027\000\044\000\000\000\000\000\000\000\044\000\000\000\000\000\
\044\000\044\000\000\000\044\000\044\000\044\000\044\000\044\000\
\044\000\000\000\000\000\044\000\044\000\044\000\044\000\032\000\
\044\000\000\000\044\000\044\000\032\000\032\000\032\000\032\000\
\032\000\000\000\032\000\032\000\032\000\000\000\000\000\028\000\
\032\000\000\000\000\000\000\000\032\000\000\000\000\000\032\000\
\032\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
\000\000\000\000\032\000\032\000\032\000\032\000\021\000\032\000\
\000\000\032\000\032\000\021\000\000\000\021\000\021\000\021\000\
\000\000\021\000\021\000\021\000\000\000\000\000\026\000\021\000\
\000\000\000\000\000\000\021\000\000\000\000\000\021\000\000\000\
\000\000\021\000\021\000\021\000\021\000\021\000\021\000\000\000\
\000\000\021\000\021\000\021\000\021\000\020\000\021\000\000\000\
\021\000\021\000\020\000\000\000\020\000\020\000\020\000\000\000\
\020\000\020\000\020\000\000\000\000\000\030\000\020\000\000\000\
\000\000\000\000\020\000\000\000\000\000\020\000\000\000\000\000\
\020\000\020\000\020\000\020\000\020\000\020\000\000\000\029\000\
\020\000\020\000\020\000\020\000\031\000\020\000\000\000\020\000\
\020\000\031\000\000\000\031\000\031\000\031\000\000\000\031\000\
\031\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\031\000\
\031\000\031\000\031\000\031\000\031\000\000\000\033\000\000\000\
\031\000\031\000\031\000\024\000\031\000\000\000\031\000\031\000\
\024\000\035\000\024\000\024\000\024\000\000\000\024\000\024\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
\024\000\000\000\000\000\000\000\000\000\000\000\024\000\024\000\
\024\000\024\000\024\000\024\000\000\000\000\000\000\000\024\000\
\024\000\024\000\025\000\024\000\000\000\024\000\024\000\025\000\
\034\000\025\000\025\000\025\000\000\000\025\000\025\000\000\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\025\000\
\000\000\000\000\013\000\000\000\000\000\025\000\025\000\025\000\
\025\000\025\000\025\000\000\000\000\000\000\000\025\000\025\000\
\025\000\027\000\025\000\000\000\025\000\025\000\027\000\000\000\
\027\000\027\000\027\000\000\000\027\000\027\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\027\000\000\000\
\000\000\036\000\000\000\000\000\027\000\027\000\027\000\027\000\
\027\000\027\000\000\000\000\000\040\000\027\000\027\000\027\000\
\028\000\027\000\000\000\027\000\027\000\028\000\000\000\028\000\
\028\000\028\000\000\000\028\000\028\000\000\000\000\000\000\000\
\000\000\028\000\000\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\028\000\028\000\028\000\028\000\028\000\
\028\000\000\000\000\000\041\000\028\000\028\000\028\000\026\000\
\028\000\000\000\028\000\028\000\026\000\000\000\026\000\026\000\
\026\000\000\000\026\000\026\000\000\000\039\000\000\000\000\000\
\026\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\
\000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
\000\000\000\000\000\000\026\000\026\000\026\000\030\000\026\000\
\050\000\026\000\026\000\030\000\000\000\030\000\030\000\030\000\
\000\000\030\000\030\000\000\000\000\000\000\000\000\000\030\000\
\000\000\000\000\000\000\030\000\000\000\029\000\000\000\029\000\
\029\000\029\000\000\000\029\000\029\000\000\000\030\000\000\000\
\000\000\029\000\030\000\030\000\030\000\029\000\030\000\000\000\
\030\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\000\000\029\000\029\000\029\000\000\000\
\029\000\000\000\029\000\029\000\033\000\000\000\033\000\033\000\
\033\000\000\000\033\000\033\000\000\000\000\000\000\000\035\000\
\033\000\035\000\035\000\035\000\033\000\035\000\035\000\000\000\
\000\000\000\000\000\000\035\000\000\000\000\000\000\000\035\000\
\000\000\000\000\000\000\033\000\033\000\033\000\000\000\033\000\
\000\000\033\000\033\000\000\000\000\000\000\000\035\000\035\000\
\035\000\000\000\035\000\000\000\035\000\035\000\034\000\000\000\
\034\000\034\000\034\000\000\000\034\000\034\000\000\000\000\000\
\000\000\000\000\034\000\000\000\000\000\000\000\034\000\000\000\
\013\000\000\000\013\000\013\000\013\000\000\000\013\000\013\000\
\000\000\000\000\000\000\000\000\013\000\034\000\034\000\034\000\
\013\000\000\000\000\000\034\000\034\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\013\000\013\000\000\000\000\000\000\000\013\000\013\000\036\000\
\000\000\036\000\036\000\036\000\000\000\000\000\036\000\000\000\
\000\000\000\000\040\000\036\000\040\000\040\000\040\000\036\000\
\040\000\040\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\036\000\036\000\
\036\000\000\000\036\000\000\000\036\000\036\000\000\000\000\000\
\000\000\040\000\040\000\040\000\000\000\000\000\000\000\040\000\
\040\000\041\000\000\000\041\000\041\000\041\000\000\000\041\000\
\041\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\041\000\000\000\039\000\000\000\039\000\039\000\039\000\
\000\000\039\000\039\000\000\000\000\000\000\000\000\000\039\000\
\041\000\041\000\041\000\039\000\000\000\000\000\041\000\041\000\
\000\000\048\000\000\000\000\000\000\000\000\000\000\000\049\000\
\000\000\000\000\039\000\039\000\039\000\000\000\051\000\000\000\
\039\000\039\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\052\000\053\000\049\000\054\000\055\000\056\000\057\000\
\058\000\059\000\051\000\000\000\060\000\000\000\000\000\000\000\
\000\000\061\000\000\000\000\000\000\000\052\000\053\000\000\000\
\054\000\055\000\056\000\057\000\058\000\059\000\048\000\000\000\
\060\000\000\000\000\000\113\000\049\000\061\000\000\000\000\000\
\000\000\000\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\053\000\
\000\000\054\000\055\000\056\000\057\000\058\000\059\000\048\000\
\000\000\060\000\000\000\000\000\133\000\049\000\061\000\148\000\
\000\000\000\000\000\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\052\000\
\053\000\000\000\054\000\055\000\056\000\057\000\058\000\059\000\
\000\000\000\000\060\000\048\000\000\000\000\000\000\000\061\000\
\000\000\049\000\158\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\053\000\000\000\054\000\055\000\
\056\000\057\000\058\000\059\000\048\000\000\000\060\000\000\000\
\000\000\000\000\049\000\061\000\161\000\000\000\000\000\000\000\
\000\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\052\000\053\000\049\000\054\000\
\055\000\056\000\057\000\058\000\059\000\051\000\000\000\060\000\
\000\000\000\000\000\000\000\000\061\000\000\000\000\000\000\000\
\052\000\053\000\000\000\054\000\055\000\056\000\057\000\058\000\
\059\000\048\000\000\000\060\000\000\000\000\000\000\000\049\000\
\061\000\000\000\048\000\000\000\140\000\000\000\051\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\052\000\053\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\052\000\053\000\060\000\054\000\055\000\056\000\
\057\000\058\000\049\000\000\000\000\000\060\000\000\000\000\000\
\000\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\052\000\053\000\000\000\054\000\
\055\000\056\000\057\000\058\000\000\000\000\000\000\000\060\000"

let yycheck = "\006\001\
\000\000\006\001\019\001\006\001\004\001\003\000\023\001\024\001\
\006\000\006\001\018\001\009\000\010\000\006\001\022\001\015\001\
\016\001\017\001\016\000\001\000\020\001\021\001\018\001\023\001\
\007\001\025\001\022\001\027\001\016\001\016\001\037\001\029\000\
\030\000\038\001\034\001\038\001\006\001\016\001\006\001\000\000\
\040\001\038\001\042\001\026\001\037\001\045\001\046\001\016\001\
\014\001\142\000\048\000\049\000\145\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\016\001\065\000\038\001\067\000\038\001\002\001\
\018\001\035\001\001\001\023\001\022\001\075\000\000\000\077\000\
\007\001\079\000\018\001\010\001\082\000\016\001\084\000\014\001\
\019\001\087\000\022\001\089\000\014\001\005\001\001\001\018\001\
\022\001\003\001\025\001\026\001\007\001\028\001\029\001\030\001\
\031\001\032\001\033\001\014\001\016\001\036\001\014\001\014\001\
\110\000\111\000\041\001\016\001\043\001\000\000\025\001\026\001\
\005\001\028\001\029\001\030\001\031\001\032\001\033\001\038\001\
\007\001\036\001\006\001\018\001\003\001\035\001\041\001\014\001\
\016\001\044\001\136\000\001\001\011\001\016\001\140\000\016\001\
\037\001\007\001\025\001\026\001\006\001\003\001\018\001\013\001\
\014\001\024\001\038\001\038\001\000\000\036\001\014\001\001\001\
\158\000\108\000\064\000\025\001\026\001\007\001\028\001\029\001\
\030\001\031\001\032\001\033\001\014\001\037\001\036\001\088\000\
\156\000\078\000\083\000\041\001\143\000\255\255\007\001\025\001\
\026\001\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\036\001\000\000\038\001\001\001\255\255\041\001\
\025\001\026\001\255\255\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\014\001\036\001\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\255\255\025\001\026\001\007\001\
\028\001\029\001\030\001\031\001\032\001\033\001\014\001\255\255\
\036\001\255\255\000\000\255\255\255\255\041\001\255\255\255\255\
\255\255\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\255\255\036\001\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\000\000\018\001\255\255\255\255\255\255\022\001\255\255\
\024\001\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\255\255\036\001\037\001\038\001\039\001\
\001\001\041\001\003\001\043\001\044\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\000\000\018\001\255\255\255\255\255\255\022\001\255\255\255\255\
\025\001\026\001\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\036\001\037\001\038\001\039\001\001\001\
\041\001\255\255\043\001\044\001\006\001\007\001\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\255\255\255\255\000\000\
\018\001\255\255\255\255\255\255\022\001\255\255\255\255\025\001\
\026\001\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\036\001\037\001\038\001\039\001\001\001\041\001\
\255\255\043\001\044\001\006\001\255\255\008\001\009\001\010\001\
\255\255\012\001\013\001\014\001\255\255\255\255\000\000\018\001\
\255\255\255\255\255\255\022\001\255\255\255\255\025\001\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\036\001\037\001\038\001\039\001\001\001\041\001\255\255\
\043\001\044\001\006\001\255\255\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\255\255\255\255\000\000\018\001\255\255\
\255\255\255\255\022\001\255\255\255\255\025\001\255\255\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\000\000\
\036\001\037\001\038\001\039\001\001\001\041\001\255\255\043\001\
\044\001\006\001\255\255\008\001\009\001\010\001\255\255\012\001\
\013\001\255\255\255\255\255\255\255\255\018\001\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\000\000\255\255\
\037\001\038\001\039\001\001\001\041\001\255\255\043\001\044\001\
\006\001\000\000\008\001\009\001\010\001\255\255\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\037\001\
\038\001\039\001\001\001\041\001\255\255\043\001\044\001\006\001\
\000\000\008\001\009\001\010\001\255\255\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\255\255\022\001\
\255\255\255\255\000\000\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\255\255\037\001\038\001\
\039\001\001\001\041\001\255\255\043\001\044\001\006\001\255\255\
\008\001\009\001\010\001\255\255\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\022\001\255\255\
\255\255\000\000\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\255\255\000\000\037\001\038\001\039\001\
\001\001\041\001\255\255\043\001\044\001\006\001\255\255\008\001\
\009\001\010\001\255\255\012\001\013\001\255\255\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\000\000\037\001\038\001\039\001\001\001\
\041\001\255\255\043\001\044\001\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\255\255\000\000\255\255\255\255\
\018\001\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\037\001\038\001\039\001\001\001\041\001\
\000\000\043\001\044\001\006\001\255\255\008\001\009\001\010\001\
\255\255\012\001\013\001\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\022\001\255\255\006\001\255\255\008\001\
\009\001\010\001\255\255\012\001\013\001\255\255\033\001\255\255\
\255\255\018\001\037\001\038\001\039\001\022\001\041\001\255\255\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\038\001\039\001\255\255\
\041\001\255\255\043\001\044\001\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\255\255\255\255\255\255\006\001\
\018\001\008\001\009\001\010\001\022\001\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\255\255\022\001\
\255\255\255\255\255\255\037\001\038\001\039\001\255\255\041\001\
\255\255\043\001\044\001\255\255\255\255\255\255\037\001\038\001\
\039\001\255\255\041\001\255\255\043\001\044\001\006\001\255\255\
\008\001\009\001\010\001\255\255\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\022\001\255\255\
\006\001\255\255\008\001\009\001\010\001\255\255\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\037\001\038\001\039\001\
\022\001\255\255\255\255\043\001\044\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\255\255\255\255\255\255\043\001\044\001\006\001\
\255\255\008\001\009\001\010\001\255\255\255\255\013\001\255\255\
\255\255\255\255\006\001\018\001\008\001\009\001\010\001\022\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\037\001\038\001\
\039\001\255\255\041\001\255\255\043\001\044\001\255\255\255\255\
\255\255\037\001\038\001\039\001\255\255\255\255\255\255\043\001\
\044\001\006\001\255\255\008\001\009\001\010\001\255\255\012\001\
\013\001\255\255\255\255\255\255\255\255\018\001\255\255\255\255\
\255\255\022\001\255\255\006\001\255\255\008\001\009\001\010\001\
\255\255\012\001\013\001\255\255\255\255\255\255\255\255\018\001\
\037\001\038\001\039\001\022\001\255\255\255\255\043\001\044\001\
\255\255\001\001\255\255\255\255\255\255\255\255\255\255\007\001\
\255\255\255\255\037\001\038\001\039\001\255\255\014\001\255\255\
\043\001\044\001\255\255\255\255\255\255\001\001\255\255\255\255\
\255\255\025\001\026\001\007\001\028\001\029\001\030\001\031\001\
\032\001\033\001\014\001\255\255\036\001\255\255\255\255\255\255\
\255\255\041\001\255\255\255\255\255\255\025\001\026\001\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\001\001\255\255\
\036\001\255\255\255\255\039\001\007\001\041\001\255\255\255\255\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\001\001\
\255\255\036\001\255\255\255\255\039\001\007\001\041\001\009\001\
\255\255\255\255\255\255\255\255\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\036\001\001\001\255\255\255\255\255\255\041\001\
\255\255\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\001\001\255\255\036\001\255\255\
\255\255\255\255\007\001\041\001\009\001\255\255\255\255\255\255\
\255\255\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\255\255\255\255\255\255\025\001\026\001\007\001\028\001\
\029\001\030\001\031\001\032\001\033\001\014\001\255\255\036\001\
\255\255\255\255\255\255\255\255\041\001\255\255\255\255\255\255\
\025\001\026\001\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\001\001\255\255\036\001\255\255\255\255\255\255\007\001\
\041\001\255\255\001\001\255\255\012\001\255\255\014\001\255\255\
\007\001\255\255\255\255\255\255\255\255\255\255\255\255\014\001\
\255\255\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\025\001\026\001\036\001\028\001\029\001\030\001\
\031\001\032\001\007\001\255\255\255\255\036\001\255\255\255\255\
\255\255\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\036\001"

let yynames_const = "\
  AND\000\
  ARRAY\000\
  ASSIGNS\000\
  BEGIN\000\
  COLON\000\
  COMMA\000\
  DIV\000\
  DO\000\
  DONE\000\
  DOWNTO\000\
  DOT\000\
  ELSE\000\
  END\000\
  EOF\000\
  EQUALS\000\
  FOR\000\
  IF\000\
  IN\000\
  LCURL\000\
  FUNCTION\000\
  VAR\000\
  ANDLET\000\
  LPAR\000\
  LSQ\000\
  MINUS\000\
  MULT\000\
  NIL\000\
  GTEQ\000\
  LTEQ\000\
  GT\000\
  LT\000\
  NE\000\
  OR\000\
  OF\000\
  PLUS\000\
  RCURL\000\
  RPAR\000\
  RSQ\000\
  SEMICOLON\000\
  TO\000\
  THEN\000\
  TYPE\000\
  WHILE\000\
  "

let yynames_block = "\
  IDENT\000\
  NUM\000\
  CHAR\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 40 "parser.mly"
                           (_1)
# 588 "parser.ml"
               : Ast.rawexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 44 "parser.mly"
                  ([ _1 ])
# 595 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 45 "parser.mly"
                                        ( _3 :: _1 )
# 603 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                        ([])
# 609 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 50 "parser.mly"
                          (_1)
# 616 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'construction_expression) in
    Obj.repr(
# 51 "parser.mly"
                               (_1)
# 623 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nary_expression) in
    Obj.repr(
# 52 "parser.mly"
                        (_1)
# 630 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sequencing_expression) in
    Obj.repr(
# 53 "parser.mly"
                             (_1)
# 637 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 57 "parser.mly"
                   (_1)
# 644 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 58 "parser.mly"
                             (_2)
# 651 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 59 "parser.mly"
                             (_2)
# 658 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 63 "parser.mly"
                                 ((Symbol.symbol _1,_3))
# 666 "parser.ml"
               : 'arraycomponent))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arraycomponent) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 66 "parser.mly"
                                                     (ArrayExp{a_typ=fst _1;a_size=snd _1;a_init=_3})
# 674 "parser.ml"
               : 'construction_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'labelassign_list) in
    Obj.repr(
# 67 "parser.mly"
                                            (RecordExp(List.rev _3, Symbol.symbol _1))
# 682 "parser.ml"
               : 'construction_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'labelassign) in
    Obj.repr(
# 71 "parser.mly"
                    ([_1])
# 689 "parser.ml"
               : 'labelassign_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'labelassign_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'labelassign) in
    Obj.repr(
# 72 "parser.mly"
                                           (_3 ::_1)
# 697 "parser.ml"
               : 'labelassign_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 76 "parser.mly"
                         ((_1,_3))
# 705 "parser.ml"
               : 'labelassign))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 80 "parser.mly"
                                      (Apply(Symbol.symbol _1,List.rev _3))
# 713 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 81 "parser.mly"
                                                  (Opexp(MinusOp,IntExp(0),_2))
# 720 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 82 "parser.mly"
                                               (Opexp(PlusOp,_1,_3))
# 728 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 83 "parser.mly"
                                                (Opexp(MinusOp,_1,_3))
# 736 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 84 "parser.mly"
                                               (Opexp(TimesOp,_1,_3))
# 744 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 85 "parser.mly"
                                              (Opexp(DivideOp,_1,_3))
# 752 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 86 "parser.mly"
                                               (Opexp(GeOp,_1,_3))
# 760 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 87 "parser.mly"
                                               (Opexp(LeOp,_1,_3))
# 768 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 88 "parser.mly"
                                             (Opexp(NeqOp,_1,_3))
# 776 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 89 "parser.mly"
                                             (Opexp(GtOp,_1,_3))
# 784 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 90 "parser.mly"
                                             (Opexp(LtOp,_1,_3))
# 792 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 91 "parser.mly"
                                             (Opexp(OrOp,_1,_3))
# 800 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 92 "parser.mly"
                                              (Opexp(AndOp,_1,_3))
# 808 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 93 "parser.mly"
                                                 (Opexp(EqOp,_1,_3))
# 816 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'l_value) in
    Obj.repr(
# 94 "parser.mly"
                 (VarExp(_1))
# 823 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'l_value) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 95 "parser.mly"
                                  (AssignExp(_1,_3))
# 831 "parser.ml"
               : 'nary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 99 "parser.mly"
                                   (SeqExp(_1,_3))
# 839 "parser.ml"
               : 'sequencing_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 100 "parser.mly"
                                                        (IfExp(_2,_4,Some _6))
# 848 "parser.ml"
               : 'sequencing_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 101 "parser.mly"
                                                                    (IfExp(_2,_4,None))
# 856 "parser.ml"
               : 'sequencing_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 102 "parser.mly"
                                         (WhileExp(_2,_4))
# 864 "parser.ml"
               : 'sequencing_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'step) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 104 "parser.mly"
 (ForExp({for_var=Symbol.symbol _2;
                 for_lo=_4;for_hi=_6;for_dir=_5;for_body=_8}))
# 876 "parser.ml"
               : 'sequencing_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_binding_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 106 "parser.mly"
                                                              (TypeExp(List.rev(_2),_4))
# 884 "parser.ml"
               : 'sequencing_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'func_let_binding) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 107 "parser.mly"
                                                              (_2 _4)
# 892 "parser.ml"
               : 'sequencing_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var_let_binding) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 108 "parser.mly"
                                                        (_2 _4)
# 900 "parser.ml"
               : 'sequencing_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
     (Up)
# 906 "parser.ml"
               : 'step))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
          (Down)
# 912 "parser.ml"
               : 'step))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 117 "parser.mly"
          (SimpleVar(Symbol.symbol _1))
# 919 "parser.ml"
               : 'l_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'l_value) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 118 "parser.mly"
                      (FieldVar(_1, _3))
# 927 "parser.ml"
               : 'l_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'l_value) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 119 "parser.mly"
                               (SubscriptVar(_1,_3))
# 935 "parser.ml"
               : 'l_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arraycomponent) in
    Obj.repr(
# 120 "parser.mly"
                   (SubscriptVar(SimpleVar(fst _1),snd _1))
# 942 "parser.ml"
               : 'l_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_binding) in
    Obj.repr(
# 123 "parser.mly"
                ([_1])
# 949 "parser.ml"
               : 'type_binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_binding_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_binding) in
    Obj.repr(
# 124 "parser.mly"
                                         (_3 :: _1)
# 957 "parser.ml"
               : 'type_binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expression) in
    Obj.repr(
# 127 "parser.mly"
                                     ((Symbol.symbol _1,_3))
# 965 "parser.ml"
               : 'type_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 131 "parser.mly"
             (Typ_alias(Symbol.symbol _1))
# 972 "parser.ml"
               : 'type_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty_fields_noempty) in
    Obj.repr(
# 132 "parser.mly"
                                     (Typ_record(_2))
# 979 "parser.ml"
               : 'type_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 133 "parser.mly"
                       (Typ_array(Symbol.symbol _3))
# 986 "parser.ml"
               : 'type_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_binding_list) in
    Obj.repr(
# 137 "parser.mly"
                                  (fun exp -> LetFunExp(List.rev _1,exp))
# 993 "parser.ml"
               : 'func_let_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_binding_list) in
    Obj.repr(
# 140 "parser.mly"
                                  (fun exp -> LetVarExp(List.rev _1,exp))
# 1000 "parser.ml"
               : 'var_let_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_binding) in
    Obj.repr(
# 144 "parser.mly"
                ([_1])
# 1007 "parser.ml"
               : 'func_binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'func_binding_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'func_binding) in
    Obj.repr(
# 145 "parser.mly"
                                         (_3 :: _1)
# 1015 "parser.ml"
               : 'func_binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyfunIDENT) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 149 "parser.mly"
                                        (let (n,p,r)=_1 in {fun_id=n;fun_params=p;fun_res=r;fun_body=_3} )
# 1023 "parser.ml"
               : 'func_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_binding) in
    Obj.repr(
# 153 "parser.mly"
               ([_1])
# 1030 "parser.ml"
               : 'var_binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_binding_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_binding) in
    Obj.repr(
# 154 "parser.mly"
                                       ( _3 :: _1)
# 1038 "parser.ml"
               : 'var_binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyIDENT) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 157 "parser.mly"
                               (let (n,t) = _1 in {var_id=n;var_typ=t;var_init=_3})
# 1046 "parser.ml"
               : 'var_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'ty_annot) in
    Obj.repr(
# 161 "parser.mly"
                                  ((Symbol.symbol _1,_3, Some _5))
# 1055 "parser.ml"
               : 'tyfunIDENT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'params) in
    Obj.repr(
# 162 "parser.mly"
                           ((Symbol.symbol _1,_3, None))
# 1063 "parser.ml"
               : 'tyfunIDENT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 166 "parser.mly"
        ((Symbol.symbol _1,None))
# 1070 "parser.ml"
               : 'tyIDENT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ty_annot) in
    Obj.repr(
# 167 "parser.mly"
                  ((Symbol.symbol _1, Some(_2)))
# 1078 "parser.ml"
               : 'tyIDENT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params_noempty) in
    Obj.repr(
# 171 "parser.mly"
                             (_1)
# 1085 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    Obj.repr(
# 172 "parser.mly"
                             ([])
# 1091 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 176 "parser.mly"
                             ([_1])
# 1098 "parser.ml"
               : 'params_noempty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params_noempty) in
    Obj.repr(
# 177 "parser.mly"
                                     ( _1 :: _3 )
# 1106 "parser.ml"
               : 'params_noempty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 181 "parser.mly"
                              ({p_name=Symbol.symbol _1; p_typ=None})
# 1113 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 182 "parser.mly"
                       ({p_name=Symbol.symbol _1; p_typ=Some (Symbol.symbol _3)})
# 1121 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.field) in
    Obj.repr(
# 186 "parser.mly"
                 ( [_1])
# 1128 "parser.ml"
               : 'ty_fields_noempty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty_fields_noempty) in
    Obj.repr(
# 187 "parser.mly"
                                         ( _1 :: _3)
# 1136 "parser.ml"
               : 'ty_fields_noempty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ty_annot) in
    Obj.repr(
# 191 "parser.mly"
                ({fi_name=Symbol.symbol _1;fi_typ=_2})
# 1144 "parser.ml"
               : Ast.field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 195 "parser.mly"
                    (Symbol.symbol(_2))
# 1151 "parser.ml"
               : 'ty_annot))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 199 "parser.mly"
         (IntExp(_1))
# 1158 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 200 "parser.mly"
           (StringExp(_1))
# 1165 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 201 "parser.mly"
          (CharExp(_1))
# 1172 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "parser.mly"
         (NilExp)
# 1178 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 205 "parser.mly"
                (Symbol.symbol _1)
# 1185 "parser.ml"
               : 'label))
(* Entry programme *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let programme (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.rawexp)
;;
