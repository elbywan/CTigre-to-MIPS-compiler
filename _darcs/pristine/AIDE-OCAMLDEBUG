
 QUELQUES MOTS SUR LE DEBUGGER DE CAML: OCAMLDEBUG

Attention: l'usage du debugger est vraiment a garder en dernier
recours, vu qu'il s'agit d'un outil puissant mais complexe, et qu'on
peut tres facilement s'y perdre. A essayer en priorite avant cela pour
identifier un souci:
a) nettoyage et relecture de son code a tete reposee
b) petits printf indicatifs
c) tests simples et/ou espionnage via #trace dans un toplevel
   (faire make top avec le Makefile fourni permet de fabriquer un 
    toplevel contenant tout le code de votre projet). 


Maintenant, pour utiliser le debugger caml, il faut tout d'abord
fabriquer un executable ayant les bonnes options. Si vous utiliser le
Makefile fourni, qui utilise a la base OCamlMakefile, il suffit de
faire: make clean && make debug-code (ou dc en plus court). 
Sinon, a vous de comprendre comment passer l'option -g aux ocamlc.

Ensuite, lancer un emacs sur un des fichiers du projet, genre main.ml
- lancer le debugger : Alt-x camldebug
  puis: main comme executable a debugger
  puis: ocamldebug comme debugger (proposition par defaut)
- apparait une fenetre de debug dans emacs.
  dedans, preciser si besoin les argument a donner a l'executable:  
   set arguments mesarguments
- si le programme ne s'arretera pas avec une exception, il faut 
  commencer par ajouter des points d'arrets (breakpoint). 
  Aller a l'emplacement voulu dans le code caml, puis faire Ctrl-x-a-b
- lancer le programme : run dans la fenetre de debug
- une fois l'execution arretee, on dispose de divers commandes pour
  investiger:
   s ou b pour avancer ou reculer d'un pas
   n ou prev pour avance ou reculer d'un appel de fonction
   p var pour afficher le contenu de la variable var
   bt pour afficher la suite des appels de variables qui a mene ici

La liste complete des commandes du debugger est disponible dans 
la documentation ocaml sur le site caml.inria.fr

Voila, happy debug ...

Pierre Letouzey

PS: pour finir, une citation de Brian W. Kernighan s'impose: 
 "Debugging is twice as hard as writing the code in the first
place. Therefore, if you write the code as cleverly as possible, 
you are, by definition, not smart enough to debug it."

